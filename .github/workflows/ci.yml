name: ci

on: [push, pull_request]
# on: workflow_dispatch

env:
  CMAKE_GENERATOR: Ninja
  RUNNER: tools/run-tests.py
  TEST_BATTERY: ./tools/ci-test-battery.sh
jobs:
  ci-linux:
    strategy:
      matrix:
        type: [release, debug]
        arch: [x86, x64]
    runs-on: ubuntu-22.04
    name: ci-linux-${{matrix.arch}}-${{matrix.type}}
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt update    
          if [ '${{ matrix.arch }}' == 'x86' ]; then
            sudo apt install gcc-multilib
          fi
          sudo apt install ninja-build
        shell: bash
      - run: $TEST_BATTERY ${{matrix.type}} ${{ (contains(matrix.arch, 'x86') && '--buildoptions=--compile-flag=-m32') || '' }}
        shell: bash

  ci-linux-arm:
    env:
      RUNTIME: qemu-${{ (contains(matrix.arch, 'armv7l') && 'arm') || matrix.arch }}-static
      TIMEOUT: 300
    strategy:
      matrix:
        type: [release, debug]
        arch: [aarch64, armv7l]
    runs-on: ubuntu-22.04
    name: ci-linux-arm-${{matrix.arch}}-${{matrix.type}}
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt update
          if [ '${{ matrix.arch }}' == 'aarch64' ]; then
            sudo apt install gcc-aarch64-linux-gnu qemu-user-static
          else
            sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user-static
          fi
          sudo apt install ninja-build
        shell: bash
      - run: $TEST_BATTERY ${{matrix.type}} --buildoptions=--toolchain=cmake/toolchain_linux_${{matrix.arch}}.cmake,--linker-flag=-static

  ci-macos:
    strategy:
      matrix:
        arch: [arm64, x64]
        type: [release, debug]
    runs-on: macos-13
    name: ci-macos-${{matrix.arch}}-${{matrix.type}}
    steps:
      - uses: actions/checkout@v4
      - run: brew install ninja
      - run: |
          if [ '${{ matrix.arch }}' == 'arm64' ]; then
            # build only, as this running does not
            ./tools/build.py ${{ (contains(matrix.type, 'debug') && '--debug') || '' }} "--compile-flag=-target arm64-apple-macos11" --jjs-pack ON --jjs-cmdline ON --jjs-cmdline-snapshot ON
          else
            $TEST_BATTERY ${{matrix.type}}
          fi


  ci-windows-x64:
    # note: Date().getDay() is broken on windows, disable associated tests
    env:
      CMAKE_GENERATOR: Visual Studio 16 2019
      BUILD_TYPE_OPTS: ${{ (contains(matrix.type, 'debug') && '--build-debug') || '' }}
    runs-on: windows-2019
    name: ci-windows-x64-${{matrix.type}}
    strategy:
      matrix:
        type: [release, debug]
    steps:
      - uses: actions/checkout@v4
      - run: choco install ninja
      - name: JS Tests
        run: python .\tools\run-tests.py -q ${BUILD_TYPE_OPTS} --jjs-tests --skip-list=regression-test-issue-1386.js,date-setters.js
        shell: powershell
      - name: Pack(age) Unit Tests
        run: python .\tools\run-tests.py -q ${BUILD_TYPE_OPTS} --jjs-pack-tests
        shell: powershell
      - name: C Unit Tests
        run: python .\tools\run-tests.py -q ${BUILD_TYPE_OPTS} --unittests
        shell: powershell

  ci-zig-example:
    env:
      CMAKE_GENERATOR: ''
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{matrix.os}}
    name: ci-zig-example-${{matrix.os}}
    steps:
      - uses: actions/checkout@v4
      - uses: goto-bus-stop/setup-zig@v2.2.0
        with:
          version: 0.11.0
      - run: python tools/build.py --amalgam ON
      - run: cd zig/example && zig build run

  Checks:
    # XXX: checks only work on 18.04, but github has deprecated the runner
    if: false
    runs-on: ubuntu-18.04 # needed for checker version stability
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: sudo apt update
      - run: sudo apt install doxygen clang-format-10 cppcheck pylint python3-serial
      - run: $RUNNER --check-signed-off=gh-actions
        if: ${{ always() }}
      - run: $RUNNER --check-doxygen
        if: ${{ always() }}
      - run: $RUNNER --check-format
        if: ${{ always() }}
      - run: $RUNNER --check-license
        if: ${{ always() }}
      - run: $RUNNER --check-strings
        if: ${{ always() }}
      - run: $RUNNER --check-pylint
        if: ${{ always() }}
      - run: $RUNNER --check-cppcheck
        if: ${{ always() }}
