name: jjs CI

on: [push, pull_request]

env:
  RUNNER: tools/run-tests.py
  ASAN_OPTIONS: detect_stack_use_after_return=1:check_initialization_order=true:strict_init_order=true
  JJS_ASAN_BUILD_OPTS_32: --buildoptions=--stack-limit=0,--compile-flag=-fsanitize=address,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common,--compile-flag=-O2,--debug,--system-allocator=on,--linker-flag=-fuse-ld=gold,--compile-flag=-m32
  JJS_ASAN_BUILD_OPTS_64: --buildoptions=--stack-limit=0,--compile-flag=-fsanitize=address,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common,--compile-flag=-O2,--debug,--system-allocator=off,--linker-flag=-fuse-ld=gold
  JJS_ASAN_SKIP_LIST: --skip-list=parser-oom.js,parser-oom2.js,stack-limit.js,regression-test-issue-4901.js,regression-test-issue-4848.js,regression-test-issue-4890.js,regression-test-issue-2190.js,regression-test-issue-2258-2963.js,regression-test-issue-2448.js,regression-test-issue-2905.js,regression-test-issue-3785.js,proxy-evil-recursion.js

jobs:
  Checks:
    if: false # XXX: checks only work on 18.04, but github has deprecated the runner
    runs-on: ubuntu-18.04 # needed for checker version stability
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - run: sudo apt update
      - run: sudo apt install doxygen clang-format-10 cppcheck pylint python3-serial
      - run: $RUNNER --check-signed-off=gh-actions
        if: ${{ always() }}
      - run: $RUNNER --check-doxygen
        if: ${{ always() }}
      - run: $RUNNER --check-format
        if: ${{ always() }}
      - run: $RUNNER --check-license
        if: ${{ always() }}
      - run: $RUNNER --check-strings
        if: ${{ always() }}
      - run: $RUNNER --check-pylint
        if: ${{ always() }}
      - run: $RUNNER --check-cppcheck
        if: ${{ always() }}

  linux_x86-64_release:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: $RUNNER -q --jjs-tests
      - run: $RUNNER -q --unittests

  linux_x86-64_debug:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: $RUNNER -q --jjs-tests --build-debug
      - run: $RUNNER -q --unittests --build-debug

  linux_x86-64_buildopts:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: $RUNNER --buildoption-test

  linux_x86_release_asan:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: $RUNNER -q --jjs-tests $JJS_ASAN_BUILD_OPTS_32 $JJS_ASAN_SKIP_LIST

  linux_x86_debug_asan:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: $RUNNER -q --jjs-tests --build-debug $JJS_ASAN_BUILD_OPTS_32 $JJS_ASAN_SKIP_LIST

  linux_x86-64_release_asan:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - run: $RUNNER -q --jjs-tests $JJS_ASAN_BUILD_OPTS_64 $JJS_ASAN_SKIP_LIST

  linux_x86-64_debug_asan:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: $RUNNER -q --jjs-tests --build-debug $JJS_ASAN_BUILD_OPTS_64 $JJS_ASAN_SKIP_LIST

  linux_armv6l_release:
    if: false # needs raspberry pi cross compiler to be set up
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-arm-static
      TIMEOUT: 300
      JJS_BUILD_OPTS: -q --buildoptions=--toolchain=cmake/toolchain_linux_armv6l.cmake,--linker-flag=-static
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user-static
      - run: $RUNNER $JJS_BUILD_OPTS --jjs-tests
      - run: $RUNNER $JJS_BUILD_OPTS --unittests

  linux_armv6l_debug:
    if: false # some unit tests fail on 32 bit debug builds
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-arm-static
      TIMEOUT: 300
      JJS_BUILD_OPTS: -q --build-debug --buildoptions=--toolchain=cmake/toolchain_linux_armv6l.cmake,--linker-flag=-static
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user-static
      - run: $RUNNER $JJS_BUILD_OPTS --jjs-tests
      - run: $RUNNER $JJS_BUILD_OPTS --unittests

  linux_armv7l_release:
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-arm-static
      TIMEOUT: 300
      JJS_BUILD_OPTS: -q --buildoptions=--toolchain=cmake/toolchain_linux_armv7l.cmake,--linker-flag=-static
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user-static
      - run: $RUNNER $JJS_BUILD_OPTS --jjs-tests
      - run: $RUNNER $JJS_BUILD_OPTS --unittests

  linux_armv7l_debug:
    # note: external-context + stack_limit > 0 are broken on 32 bit debug builds
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-arm-static
      TIMEOUT: 300
      JJS_BUILD_OPTS: -q --build-debug --buildoptions=--toolchain=cmake/toolchain_linux_armv7l.cmake,--linker-flag=-static
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user-static
      - run: $RUNNER $JJS_BUILD_OPTS --jjs-tests --no-external-context-tests
      - run: $RUNNER $JJS_BUILD_OPTS --unittests

  linux_aarch64_release:
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-aarch64-static
      TIMEOUT: 300
      JJS_BUILD_OPTS: -q --buildoptions=--toolchain=cmake/toolchain_linux_aarch64.cmake,--linker-flag=-static
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-aarch64-linux-gnu libc6-dev-armhf-cross qemu-user-static
      - run: $RUNNER $JJS_BUILD_OPTS --jjs-tests
      - run: $RUNNER $JJS_BUILD_OPTS --unittests

  linux_aarch64_debug:
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-aarch64-static
      TIMEOUT: 300
      JJS_BUILD_OPTS: -q --buildoptions=--toolchain=cmake/toolchain_linux_aarch64.cmake,--linker-flag=-static --build-debug
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-aarch64-linux-gnu libc6-dev-armhf-cross qemu-user-static
      - run: $RUNNER $JJS_BUILD_OPTS --jjs-tests
      - run: $RUNNER $JJS_BUILD_OPTS --unittests

  macos_x86-64_release:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - run: $RUNNER -q --jjs-tests
      - run: $RUNNER -q --unittests

  macos_x86-64_debug:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - run: $RUNNER -q --jjs-tests --build-debug
      - run: $RUNNER -q --unittests --build-debug

  windows_x64_release:
    # note: Date().getDay() is broken on windows, disable associated tests
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: JS Tests
        run: python .\tools\run-tests.py -q --jjs-tests --skip-list=regression-test-issue-1386.js,date-setters.js
        shell: powershell
      - name: C Unit Tests
        run: python .\tools\run-tests.py -q --unittests
        shell: powershell

  windows_x64_debug:
    # note: Date().getDay() is broken on windows, disable associated tests
    # note: external-context + stack_limit > 0 are broken on windows debug builds (problem seen in linux 32 bit also)
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: JS Tests
        run: python .\tools\run-tests.py -q --build-debug --jjs-tests --skip-list=regression-test-issue-1386.js,date-setters.js --no-external-context-tests
        shell: powershell
      - name: C Unit Tests
        run: python .\tools\run-tests.py -q --build-debug --unittests
        shell: powershell

  ecma_test262_release:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Run Tests
        run: python $RUNNER --test262
      - uses: actions/upload-artifact@v3.1.2
        if: success() || failure()
        with:
          name: Test262-report-release
          path: |
            build/tests/test262/local/bin/test262.report

  ecma_test262_debug:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Run Tests
        run: python $RUNNER --test262 --build-debug
      - uses: actions/upload-artifact@v3.1.2
        if: success() || failure()
        with:
          name: Test262-report-debug
          path: |
            build/tests/test262-debug/local/bin/test262.report

  UBSAN_Tests:
    runs-on: ubuntu-20.04
    if: false # XXX: 32-bit debug builds are broken - some tests failing with RangeError
    env:
      UBSAN_OPTIONS: print_stacktrace=1
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: >-
          $RUNNER -q --jjs-tests
          --buildoptions=--compile-flag=-fsanitize=undefined,--compile-flag=-m32,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common,--debug,--system-allocator=on,--linker-flag=-fuse-ld=gold
          --skip-list=parser-oom.js,parser-oom2.js
      - run: >-
          $RUNNER -q --jjs-tests --build-debug
          --buildoptions=--compile-flag=-fsanitize=undefined,--compile-flag=-m32,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common,--debug,--system-allocator=on,--linker-flag=-fuse-ld=gold
          --skip-list=parser-oom.js,parser-oom2.js

  Linux_x86_cpointer-32bit_Build_Correctness_Tests:
    runs-on: ubuntu-20.04
    if: false # XXX: 32-bit debug builds are broken - some tests failing with RangeError
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: $RUNNER -q --jjs-tests --buildoptions=--compile-flag=-m32,--cpointer-32bit=on
      - run: $RUNNER -q --jjs-tests --buildoptions=--compile-flag=-m32,--cpointer-32bit=on --build-debug

  zig_example:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
      - uses: goto-bus-stop/setup-zig@v2.1.1
        with:
          version: 0.11.0
      - run: python tools/build.py --amalgam ON
      - run: cd zig/example && zig build run
