name: jjs CI

on: [push, pull_request]

env:
  RUNNER: tools/run-tests.py

jobs:
  Checks:
    if: false # XXX: checks only work on 18.04, but github has deprecated the runner
    runs-on: ubuntu-18.04 # needed for checker version stability
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - run: sudo apt update
      - run: sudo apt install doxygen clang-format-10 cppcheck pylint python3-serial
      - run: $RUNNER --check-signed-off=gh-actions
        if: ${{ always() }}
      - run: $RUNNER --check-doxygen
        if: ${{ always() }}
      - run: $RUNNER --check-format
        if: ${{ always() }}
      - run: $RUNNER --check-license
        if: ${{ always() }}
      - run: $RUNNER --check-strings
        if: ${{ always() }}
      - run: $RUNNER --check-pylint
        if: ${{ always() }}
      - run: $RUNNER --check-cppcheck
        if: ${{ always() }}

  Linux_x86-64_Build_Correctness_Debugger_Tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: curl https://pyenv.run | bash
      - run: echo "$HOME/.pyenv" >> $GITHUB_PATH
      - run: pyenv install 2.7.18
      - run: pyenv global system 2.7.18
      - run: $RUNNER -q --jjs-tests
      - run: $RUNNER -q --jjs-tests --build-debug
      - run: python2 $RUNNER -q --jjs-debugger
      - run: python2 $RUNNER -q --jjs-debugger --build-debug

  Linux_x86_cpointer-32bit_Build_Correctness_Tests:
    runs-on: ubuntu-20.04
    if: false # XXX: 32-bit debug builds are broken - some tests failing with RangeError
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: $RUNNER -q --jjs-tests --buildoptions=--compile-flag=-m32,--cpointer-32bit=on
      - run: $RUNNER -q --jjs-tests --buildoptions=--compile-flag=-m32,--cpointer-32bit=on --build-debug

  OSX_x86-64_Build_Correctness_Unit_Tests:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - run: $RUNNER -q --jjs-tests
      - run: $RUNNER -q --unittests --skip-list=unit-math

  OSX_x86-64_Build_Correctness_Unit_Tests_Debug:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - run: $RUNNER -q --jjs-tests --build-debug
      - run: $RUNNER -q --unittests --build-debug --skip-list=unit-math

  # Note: Date().getDay() is broken on windows, disable associated tests
  Windows_x64_Build_Correctness_Unit_Tests:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: JS Tests
        # invoking snapshot via test python scripts is broken on windows
        run: python .\tools\run-tests.py -q --jjs-tests --no-snapshot-tests --skip-list=regression-test-issue-1386.js,date-setters.js
        shell: powershell
      - name: C Unit Tests
        run: python .\tools\run-tests.py -q --unittests --skip-list=unit-test-date-helpers,unit-math
        shell: powershell

  Linux_x86-64_Build_Option_Tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: $RUNNER --buildoption-test

  Conformance_Tests_ESNext:
    if: false # python 2.7 is not supported in this runner image
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '2.7'
      - run: $RUNNER --test262 update
      - uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: Test262-ESNext-results
          path:  |
            build/tests/test262_tests_esnext/local/bin/test262.report

  Conformance_Tests_ESNext_Debug_A:
    if: false # python 2.7 is not supported in this runner image
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '2.7'
      - run: $RUNNER --test262 update --build-debug --test262-test-list=built-ins,annexB,harness,intl402
      - uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: Test262-ESNext-Debug-A-results
          path: |
            build/tests/test262_tests_esnext-debug/local/bin/test262.report

  Conformance_Tests_ESNext_Debug_B:
    if: false # python 2.7 is not supported in this runner image
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '2.7'
      - run: $RUNNER --test262 update --build-debug --test262-test-list=language
      - uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: Test262-ESNext-Debug-B-results
          path: |
            build/tests/test262_tests_esnext-debug/local/bin/test262.report

  Unit_Tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: $RUNNER -q --unittests --skip-list=unit-math
      - run: $RUNNER -q --unittests --build-debug --skip-list=unit-math

  Clang_Unit_Build_Option_Tests:
    runs-on: ubuntu-20.04
    env:
      CC: clang
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: $RUNNER -q --unittests --skip-list=unit-math
      # clang has bug in supporting lto
      - run: $RUNNER -q --buildoption-test --buildoptions=--lto=off

  ASAN_Tests:
    runs-on: ubuntu-20.04
    env:
      ASAN_OPTIONS: detect_stack_use_after_return=1:check_initialization_order=true:strict_init_order=true
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: >-
          $RUNNER -q --jjs-tests
          --buildoptions=--stack-limit=0,--compile-flag=-fsanitize=address,--compile-flag=-m32,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common,--compile-flag=-O2,--debug,--system-allocator=on,--linker-flag=-fuse-ld=gold
          --skip-list=parser-oom.js,parser-oom2.js,stack-limit.js,regression-test-issue-4901.js,regression-test-issue-4848.js,regression-test-issue-4890.js,regression-test-issue-2190.js,regression-test-issue-2258-2963.js,regression-test-issue-2448.js,regression-test-issue-2905.js,regression-test-issue-3785.js,proxy-evil-recursion.js

  ASAN_Tests_Debug:
    runs-on: ubuntu-20.04
    env:
      ASAN_OPTIONS: detect_stack_use_after_return=1:check_initialization_order=true:strict_init_order=true
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: >-
          $RUNNER -q --jjs-tests --build-debug
          --buildoptions=--stack-limit=0,--compile-flag=-fsanitize=address,--compile-flag=-m32,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common,--compile-flag=-O2,--debug,--system-allocator=on,--linker-flag=-fuse-ld=gold
          --skip-list=parser-oom.js,parser-oom2.js,stack-limit.js,regression-test-issue-4901.js,regression-test-issue-4848.js,regression-test-issue-4890.js,regression-test-issue-2190.js,regression-test-issue-2258-2963.js,regression-test-issue-2448.js,regression-test-issue-2905.js,regression-test-issue-3785.js,proxy-evil-recursion.js

  UBSAN_Tests:
    runs-on: ubuntu-20.04
    if: false # XXX: 32-bit debug builds are broken - some tests failing with RangeError
    env:
      UBSAN_OPTIONS: print_stacktrace=1
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-multilib
      - run: >-
          $RUNNER -q --jjs-tests
          --buildoptions=--compile-flag=-fsanitize=undefined,--compile-flag=-m32,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common,--debug,--system-allocator=on,--linker-flag=-fuse-ld=gold
          --skip-list=parser-oom.js,parser-oom2.js
      - run: >-
          $RUNNER -q --jjs-tests --build-debug
          --buildoptions=--compile-flag=-fsanitize=undefined,--compile-flag=-m32,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common,--debug,--system-allocator=on,--linker-flag=-fuse-ld=gold
          --skip-list=parser-oom.js,parser-oom2.js

  Linux_ARMv7l_Tests:
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-arm-static
      TIMEOUT: 300
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user-static
      - run: >-
          $RUNNER -q --jjs-tests
          --buildoptions=--toolchain=cmake/toolchain_linux_armv7l.cmake,--linker-flag=-static

  Linux_ARMv7l_Tests_Debug:
    runs-on: ubuntu-20.04
    if: false # XXX: 32-bit debug builds are broken - some tests failing with RangeError
    env:
      RUNTIME: qemu-arm-static
      TIMEOUT: 300
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user-static
      - run: >-
          $RUNNER -q --jjs-tests --build-debug
          --buildoptions=--toolchain=cmake/toolchain_linux_armv7l.cmake,--linker-flag=-static

  Linux_AArch64_Tests:
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-aarch64-static
      TIMEOUT: 300
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-aarch64-linux-gnu libc6-dev-armhf-cross qemu-user-static
      - run: >-
          $RUNNER -q --jjs-tests
          --buildoptions=--toolchain=cmake/toolchain_linux_aarch64.cmake,--linker-flag=-static

  Linux_AArch64_Tests_Debug:
    runs-on: ubuntu-20.04
    env:
      RUNTIME: qemu-aarch64-static
      TIMEOUT: 300
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-aarch64-linux-gnu libc6-dev-armhf-cross qemu-user-static
      - run: >-
          $RUNNER -q --jjs-tests --build-debug
          --buildoptions=--toolchain=cmake/toolchain_linux_aarch64.cmake,--linker-flag=-static

# broken on 20.04
#  MbedOS_K64F_Build_Test:
#    runs-on: ubuntu-18.04 # needed due to ppa:team-gcc-arm-embedded/ppa
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.8' # needed due to 'intelhex' module
#      - run: sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa
#      - run: sudo apt update
#      - run: sudo apt install gcc-arm-embedded python3-setuptools mercurial
#      - run: make -f ./targets/os/mbedos/Makefile.travis install
#      - run: make -f ./targets/os/mbedos/Makefile.travis script

  Zephyr_STM32F4_Build_Test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: sudo apt update
      - run: sudo apt install gperf dfu-util device-tree-compiler
      - run: make -f ./targets/os/zephyr/Makefile.travis install
      - run: make -f ./targets/os/zephyr/Makefile.travis script

  NuttX_STM32F4_Build_Test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt update
      - run: sudo apt install gcc-arm-none-eabi libnewlib-arm-none-eabi gperf
      - run: make -f ./targets/os/nuttx/Makefile.travis install-noapt
      - run: make -f ./targets/os/nuttx/Makefile.travis script

# broken on ubuntu 20.04
#  RIOT_STM32F4_Build_Test:
#    runs-on: ubuntu-18.04 # needed due to ppa:team-gcc-arm-embedded/ppa
#    env:
#      CC: clang
#    steps:
#      - uses: actions/checkout@v3
#      - run: sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa
#      - run: sudo apt update
#      - run: sudo apt install clang gcc-arm-embedded gcc-multilib
#      - run: make -f ./targets/os/riot/Makefile.travis install-noapt
#      - run: make -f ./targets/os/riot/Makefile.travis script

# broken on ubuntu 20.04
#  ESP8266_RTOS_SDK_Build_Test:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.8'
#      - run: make -f ./targets/baremetal-sdk/espressif/esp8266-rtos-sdk/Makefile.travis install-noapt
#      - run: make -f ./targets/baremetal-sdk/espressif/esp8266-rtos-sdk/Makefile.travis script

# broken on ubuntu 20.04
#  ESP_IDF_Build_Test:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.8'
#      - run: make -f ./targets/baremetal-sdk/espressif/esp-idf/Makefile.travis install-noapt
#      - run: make -f ./targets/baremetal-sdk/espressif/esp-idf/Makefile.travis script
