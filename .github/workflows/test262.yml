# test262 workflow
#
# Conformance tests are limited to macos and linux x64, as these configurations are
# known to work.
#
# On windows, the test262 harness is broken. The JJS unit tests run on windows (with a few
# exceptions), so running the test262 should not be an issue. However, it will require
# work to fix the harness and verify.
#
# On debug builds, the undefined and address sanitizers are turned on so the test runs will
# be slow. At the time of writing, about 10 tests fail due to sanitizer issues.
#
# The full suite of conformance tests includes late stage proposals and features that JJS
# does not (or will not) implement. And, JJS has bugs causing some tests to fail. With the
# full test suite considered, JJS passes about 80% of test262.
#
# Excludes can be found at tests/test262-excludelist.xml

name: test262

on: workflow_dispatch

env:
  RUNNER: tools/run-tests.py
  ASAN_OPTIONS: detect_stack_use_after_return=1:check_initialization_order=true:strict_init_order=true
  UBSAN_OPTIONS: print_stacktrace=1

jobs:
  test262-linux:
    env:
      TEST_OPTIONS: ${{ (contains(matrix.type, 'debug') && '--build-debug --buildoptions=--compile-flag=-fsanitize=address,--compile-flag=-fsanitize=undefined,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common') || '' }} ${{ (contains(matrix.arch, 'x86') && '--buildoptions=--compile-flag=-m32') || '' }}
    strategy:
      matrix:
        type: [release, debug]
        arch: [x86, x64]
    runs-on: ubuntu-22.04
    name: test262-linux-${{matrix.arch}}-${{matrix.type}}
    steps:
      - uses: actions/checkout@v4
      - run: |
          if [ '${{ matrix.arch }}' == 'x86' ]; then
            sudo apt update
            sudo apt install gcc-multilib
          fi
        shell: bash
      - run: $RUNNER --test262 ${TEST_OPTIONS}
        shell: bash
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test262-linux-${{matrix.arch}}-${{matrix.type}}-report
          path: |
            build/tests/test262*/local/bin/test262.report
  test262-linux-arm:
    env:
      RUNTIME: qemu-${{ (contains(matrix.arch, 'armv7l') && 'arm') || matrix.arch }}-static
      TIMEOUT: 300
      # sanitizer builds take too long, fall back to normal debug builds
      TEST_OPTIONS: ${{ (contains(matrix.type, 'debug') && '--build-debug') || '' }}
    strategy:
      matrix:
        type: [release, debug]
        arch: [aarch64, armv7l]
    runs-on: ubuntu-22.04
    name: test262-linux-arm-${{matrix.arch}}-${{matrix.type}}
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt update
          if [ '${{ matrix.arch }}' == 'aarch64' ]; then
            sudo apt install gcc-aarch64-linux-gnu qemu-user-static
          else
            sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross qemu-user-static
          fi
        shell: bash
      - run: $RUNNER --test262 ${TEST_OPTIONS} --buildoptions=--toolchain=cmake/toolchain_linux_${{matrix.arch}}.cmake,--linker-flag=-static
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test262-linux-arm-${{matrix.arch}}-${{matrix.type}}-report
          path: |
            build/tests/test262*/local/bin/test262.report
  test262-macos:
    env:
      # sanitizer builds take too long, fall back to normal debug builds
      TEST_OPTIONS: ${{ (contains(matrix.type, 'debug') && '--build-debug --buildoptions=--compile-flag=-fsanitize=undefined,--compile-flag=-fno-omit-frame-pointer,--compile-flag=-fno-common') || '' }}
    strategy:
      matrix:
        type: [release, debug]
    runs-on: macos-13
    name: test262-macos-${{matrix.type}}
    steps:
      - uses: actions/checkout@v4
      - run: $RUNNER --test262 ${TEST_OPTIONS}
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test262-macos-${{matrix.type}}-report
          path: |
            build/tests/test262*/local/bin/test262.report
